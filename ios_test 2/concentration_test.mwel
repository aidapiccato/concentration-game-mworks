resource (letters)

stimulus_display (background_color = 0.5, 0.5, 0.5)
// per session
// load images into image dataset
// at the beginning of each block
// - have list of image_filenames
// at the beginning of each trial
// - load image A

var stim_size = 10

var card_a_image_path = ''
var card_b_image_path = ''

%define card_a_pos_x = -4
%define card_a_pos_y = 0

%define card_b_pos_x = 4
%define card_b_pos_y = 0

var card_a = 0
var card_b = 0

image_file card_a_image (
    path = card_a_image_path
    x_size = stim_size
    y_size = stim_size
    x_position = card_a_pos_x
    y_position = card_a_pos_y
    deferred = explicit
)

image_file card_b_image (
    path = card_b_image_path
    x_size = stim_size
    y_size = stim_size
    x_position = card_b_pos_x
    y_position = card_b_pos_y
    deferred = explicit
)

%define load_card_a ()
    card_a_image_path = "letters/A.png"
    load_stimulus (card_a_image)
    queue_stimulus (card_a_image)
%end

%define load_card_b ()
    card_b_image_path = "letters/B.png"
    load_stimulus (card_b_image)
    queue_stimulus (card_b_image)
%end

protocol 'Run task' {
    block (nsamples = 1; sampling_method = cycles; selection = sequential_ascending) {
        trial (nsamples = 4; sampling_method = samples) {
            task {
                state 'Flip first card' {
                    report ('Flip first card')
                    load_card_a ()
                    update_display ()
                    start_timer (
                        timer = choice_timer
                        duration = 2s
                    )
                    goto (
                        target = 'Flip second card'
                        when = timer_expired (choice_timer)
                    )
                }
                state 'Flip second card' {
                    load_card_b ()
                    update_display ()
                    goto ( 'Feedback' )
                }
                state 'Feedback' {
                    start_timer (
                        timer = feedback_timer
                        duration = 1s
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (feedback_timer)
                    )
                }
                state 'Trial end' {
                    dequeue_stimulus (card_a_image)
                    dequeue_stimulus (card_b_image)
                    update_display ()
                    unload_stimulus (card_a_image)
                    unload_stimulus (card_b_image)
                    yield ()
                }
            }
        }
    }
}