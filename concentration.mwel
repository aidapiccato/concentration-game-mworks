%include 'concentration-ios-io'

%define effector_x = touch_position_x
%define effector_y = touch_position_y
%define effector_down = touch_in_progress

resource ( 'resources' )
resource ( images )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// experiment level macros
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

group 'Trial variables' {
    var card_a = 0
    var card_b = 0
    var success = 0
    var failure = 0
    var ignore = 0
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

group 'Timer duration variables' {
    var choice_dur = 4s
    var feedback_dur = 500ms
    var iti_dur = 0.5s
    var block_dur = 5s
    // var block_dur = 30s
}


group 'Configuration variables' {
    var n_config_repeats = 8
    var n_configs = 4
    var n_cycles = 4
    var n_cards_max = 25
    var n_pairs = 8
    var grid_dims = [2, 2]
    var grid = [0, 0, 0, 0]
    var n_images = 4s
    var n_success = 0
    var n_ignore = 0
    var n_failure = 0
    var feedback = 1
    var n_trials = 25
    var trials = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

var sync = 0
var sess_index = 0
var subject_id = 0
var block_index = -1
var trial_index = -1
var trial_in_block_index = -1
var version = 1
%define n_blocks = n_config_repeats * n_configs
%define n_trials_max = n_cycles * n_cards_max // maximum number of possible trials

%include 'concentration-stim'

group 'Python variables' {
    var py_n_cycles = 0
    var py_n_cards_max = 0
    var py_n_configs = 0
    var py_n_config_repeats = 0
    var py_sess_index = -1
    var py_n_pairs = 0
    var py_n_trials = 0
    var py_grid_dims = [0, 0]
    var py_feedback = 0
    var py_grid = [0, 0, 0, 0]
    var py_n_images = 0
    var py_card_a = 0
    var py_trials = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}

group 'Sync variables' {
    var ITI = 1
    var TRIAL_INIT = 2
    var FLIP_CARD_A = 3
    var FLIP_CARD_B = 4
    var FEEDBACK = 5
    var TRIAL_END = 6
    var BLOCK_BREAK = 7
}


selection selection_trial_index (
    values = 0:n_trials_max
    selection = sequential_ascending
    advance_on_accept = NO
    autoreset = NO
)

%define reset_trial_vars ()
    success = 0
    failure = 0
    ignore = 1
    card_b = 0
%end

%define update_block_meta ()
    block_index = block_index + 1
    run_python_string( get_block_metaparameters() )
    n_pairs = py_n_pairs
    grid = py_grid
    grid_dims = py_grid_dims
    n_images = py_n_images
    trials = py_trials
    n_trials = py_n_trials
%end

%define update_trial_meta ()
    card_a = trials[selection_trial_index]
    trial_index = trial_index + 1
    trial_in_block_index = trial_in_block_index + 1
%end

%define reset_block_vars ()
    n_success = 0
    n_failure = 0
    n_ignore = 0
    reset_selection (selection_trial_index)
    trial_in_block_index = -1
%end

%define refresh_vars_for_sync ()
    block_index = block_index
    n_pairs = n_pairs
    grid = grid
    grid_dims = grid_dims
    trials = trials
    card_a = card_a
    card_b = card_b
    success = success
    ignore = ignore
    failure = failure
    trial_index = trial_index
    trial_in_block_index = trial_in_block_index
%end

%define evaluate ()
    ignore = ignore or card_a == card_b
    success = grid[card_b] == grid[card_a] * !ignore
    failure = !success * !ignore
%end

protocol 'Load session' {
    run_python_file ('resources/utils.py')
    run_python_string ( get_session_metaparameters() )
    n_cycles = py_n_cycles
    n_configs = py_n_configs
    n_cards_max = py_n_cards_max
    n_config_repeats = py_n_config_repeats
}

var test = 0
protocol 'Save session' {
    run_python_file ('resources/utils.py')
    run_python_string ( add_sess() )
}

protocol 'Run task' {
    run_python_file ('resources/utils.py')
    block (nsamples = n_blocks; sampling_method = cycles; selection = sequential_ascending) {

        update_block_meta ()

        reset_block_vars ()

        display_targets ()

        trial (nsamples = n_trials_max; sampling_method = samples) {

            task {
                state 'Transition' {
                    sync = 0
                    goto (
                        target = 'Block break'
                        when = selection_trial_index == n_trials_max // and (block_index + 1) % 2 == 0
                    )
                    goto (
                        target = 'Yield'
                        when = selection_trial_index >= n_trials
                    )
                    goto ( 'Intertrial interval' )
                }
                state 'Block break' {
                    report('BLOCK BREAK')
                    sync = BLOCK_BREAK
                    display_message ()
                    wait (block_dur)
                    hide_message ()
                    sync = 0
                    goto ('Yield')
                }
                state 'Yield' {
                    accept_selections (selection_trial_index)
                    next_selection (selection_trial_index)
                    yield ()
                }
                state 'Intertrial interval' {
                    sync = ITI
                    reset_trial_vars ()
                    wait (iti_dur)
                    goto ('Trial init')
                }
                state 'Trial init' {
                    sync = TRIAL_INIT
                    update_trial_meta ()
                    goto ( 'Flip first card' )
                }
                state 'Flip first card' {
                    sync = FLIP_CARD_A
                    load_card_a ()
                    update_display ()
                    start_timer (
                        timer = choice_timer
                        duration = choice_dur
                    )
                    goto (
                        target = 'Flip second card'
                        when = card_selected
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (choice_timer)
                    )
                }
                state 'Flip second card' {
                    sync = FLIP_CARD_B
                    ignore = 0
                    read_card_selection ()
                    evaluate ()
                    load_card_b ()
                    update_display ()
                    goto ( 'Feedback' )
                }
                state 'Feedback' {
                    sync = FEEDBACK
                    start_timer (
                        timer = feedback_timer
                        duration = feedback_dur
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (feedback_timer)
                    )
                }
                state 'Trial end' {
                    sync = TRIAL_END

                    unload_card_a ()
                    unload_card_b ()

                    update_display ()

                    n_success = n_success + success
                    n_failure = n_failure + failure
                    n_ignore = n_ignore + ignore

                    refresh_vars_for_sync ()

                    accept_selections (selection_trial_index)
                    next_selection (selection_trial_index)

                    sync = TRIAL_END
                    yield ()
                }
            }
        }
    }
}