////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// variable groups
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
group 'Configuration variables' {
    var n_pairs = 8
    var grid_dims = [2, 2]
    var grid = [0, 0, 0, 0]
    var inv_grid = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    var flipped = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    var n_success = 0
    var n_ignore = 0
    var n_failure = 0
    var feedback = 1
    var n_trials = 0
}

var sync = 0

group 'Sync variables' {
    var ITI = 1
    var TRIAL_INIT = 2
    var FLIP_CARD_A = 3
    var FLIP_CARD_B = 4
    var FEEDBACK = 5
    var TRIAL_END = 6
    var BLOCK_BREAK = 7
}

group 'Trial variables' {
    var card_a = 0
    var card_b = 0
    var success = 0
    var failure = 0
    var ignore = 0
}
group 'Timer duration variables' {
    var choice_dur = 5s
    var feedback_dur = 0.5s
    var iti_dur = 0.5s
    var block_dur = 30s
}

group 'Python variables' {
    var py_n_pairs = 0
    var py_grid_dims = [0, 0]
    var py_feedback = 0
    var py_grid = [0, 0, 0, 0]
    var py_inv_grid = [0, 0, 0, 0]
    var py_card_a = 0
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// includes
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%include 'concentration-io'
%include 'concentration-stim'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// update macros
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%define update_block_meta ()
   block_index = block_index + 1
   run_python_string(get_block_metaparameters())
   n_pairs = py_n_pairs
   grid = py_grid
   inv_grid = py_inv_grid
   grid_dims = py_grid_dims

%end

%define reset_block_vars ()
    flipped = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    n_success = 0
    n_failure = 0
    n_ignore = 0
    trial_index = -1
    reset_selection (selection_trial_index)
%end

%define reset_trial_vars ()
    success = 0
    failure = 0
    ignore = 1
    card_b = 0
    move_mouse_cursor (device=pointer; x_position=0; y_position=0)
%end

%define update_trial_meta ()
    trial_index = selection_trial_index
    run_python_string(get_trial_metaparameters())
    card_a = py_card_a

%end



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// evaluation macros
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%define mark_as_flipped ()
    flipped[card_a] = 1
    flipped[card_b] = 1
%end

%define evaluate ()
    ignore = ignore or card_a == card_b
    if (! ignore) {
        success = grid[card_b] == grid[card_a]
        failure = !success
    }
    if (feedback and success) {
        mark_as_flipped ()
    }
%end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// experiment level macros
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%define n_cycles = 3 // number of times all cards in each config are cycled through
%define n_configs = 3 // number of different configuration sizes
%define n_config_repeats = 4 // number of times a configuration size is repeated
%define n_blocks = n_config_repeats * n_configs


%define n_images = n_pairs * 2
%define n_trials_max = n_cycles * n_cards_max // maximum number of possible trials
%define n_trials_total = n_cycles * n_images  // number of trials for current block

var block_index = -1
var trial_index = -1 // session_level trial_index

selection selection_trial_index (
    values = 0:n_trials_max
    selection = sequential_ascending
    advance_on_accept = NO
    autoreset = NO
)

var subject_id = 0
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////// protocols
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

protocol 'Concentration - No feedback, subject_id' {
    start_io_device (pointer)
    run_python_file ('utils.py')
    feedback = 0
    block (nsamples = n_blocks * n_trials_max ; sampling_method = samples; selection = sequential_ascending) {
        update_block_meta ()

        report ('***NEW BLOCK $block_index***')

        update_display ()

        reset_block_vars ()

        display_images ()

        display_targets ()

        update_display ()

        trial (nsamples = n_trials_max; sampling_method = samples) {
            task {
                state 'Transition' {
                    report ('Selection trial index: $selection_trial_index, trial_index: $trial_index')
                    sync = 0
                    goto (
                        target = 'Block break'
                        when = selection_trial_index == n_trials_total
                    )
                    goto (
                        target = 'Yield'
                        when = selection_trial_index > n_trials_total
                    )
                    goto ( 'Intertrial interval' )
                }
                state 'Block break' {
                    report('BLOCK BREAK')
                    sync = BLOCK_BREAK
                    display_message ()
                    wait (block_dur)
                    hide_message ()
                    sync = 0
                    goto ('Yield')
                }
                state 'Yield' {
                    accept_selections (selection_trial_index)
                    next_selection (selection_trial_index)
                    yield ()
                }
                state 'Intertrial interval' {
                    sync = ITI
                    reset_trial_vars ()
                    wait (iti_dur)
                    goto ('Trial init')
                }
                state 'Trial init' {
                    report ('TRIAL INIT $trial_index')
                    sync = TRIAL_INIT
                    update_trial_meta ()
                    goto ( 'Flip first card' )
                }
                state 'Flip first card' {
                    report ('FLIP FIRST CARD $card_a')
                    sync = FLIP_CARD_A
                    start_timer (
                        timer = choice_timer
                        duration = choice_dur
                    )
                    goto (
                        target = 'Flip second card'
                        when = card_selected
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (choice_timer)
                    )
                }
                state 'Flip second card' {
                    report ('FLIP SECOND CARD')
                    sync = FLIP_CARD_B
                    ignore = 0
                    read_card_selection ()
                    evaluate ()
                    goto ( 'Feedback' )
                }
                state 'Feedback' {
                    sync = FEEDBACK
                    start_timer (
                        timer = feedback_timer
                        duration = feedback_dur
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (feedback_timer)
                    )
                }
                state 'Trial end' {
                    report ('TRIAL END')


                    n_success = n_success + success
                    n_failure = n_failure + failure
                    n_ignore = n_ignore + ignore

                    accept_selections (selection_trial_index)
                    next_selection (selection_trial_index)
                    sync = TRIAL_END
                    yield ()
                }
            }
        }
    }
}
