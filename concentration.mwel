group 'Configuration variables' {
    var n_pairs = 8
    var grid_dims = [4, 4]
    var grid = [0, 0, 0, 0]
    var inv_grid = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    var flipped = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    var n_success = 0
    var n_ignore = 0
    var n_failure = 0
    var feedback = 1
}

group 'Sync variables' {
    var TRIAL_START = 0
    var FLIP_CARD_A = 1
    var FLIP_CARD_B = 2
    var TRIAL_END = 3
}

group 'Trial variables' {
    var card_a = 0
    var card_b = 0
    var success = 0
    var failure = 0
    var ignore = 0
}

%include 'concentration-targets'
%include 'concentration-io'
%include 'concentration-stim'

stimulus_display (
    background_color = br, bg, bb
    redraw_on_every_refresh = true
    announce_stimuli_on_implicit_updates = false
)

group 'Experiment variables' {
    var n_blocks = 3                // number of configurations shown in session
    var n_trials_per_block = 200    // number of trials per configuration
}

group 'Timer duration variables' {
    var choice_dur = 5s
    var feedback_dur = 2s
    var iti_dur = 2s
}

group 'Python variables' {
    var py_n_pairs = 0
    var py_grid_dims = [0, 0]
    var py_feedback = 0
    var py_grid = [0, 0, 0, 0]
    var py_inv_grid = [0, 0, 0, 0]
    var py_card_a = 0
}

var sync = 0

%define update_config_meta ()
   run_python_string(get_config_metaparameters())
   n_pairs = py_n_pairs
   grid_dims = py_grid_dims
   feedback = py_feedback
   grid = py_grid
   inv_grid = py_inv_grid
%end


%define reset_trial_vars ()
    success = 0
    failure = 0
    ignore = 1
    card_b = 0
    move_mouse_cursor (device=pointer; x_position=0; y_position=0)

%end

%define update_trial_meta ()
    run_python_string(get_trial_metaparameters())
    card_a = py_card_a
%end

%define mark_as_flipped ()
    flipped[card_a] = 1
    flipped[card_b] = 1
%end

%define evaluate ()
    ignore = ignore or card_a == card_b
    if (! ignore) {
        success = grid[card_b] == grid[card_a]
        failure = !success
    }
    if (feedback and success) {
        mark_as_flipped ()
    }
%end

protocol 'Concentration' {

    start_io_device (pointer)
    run_python_file ('utils.py')

    block (nsamples=n_blocks) {
        report ('***NEW BLOCK***')
        update_config_meta ()
        display_images ()
        display_targets ()

        update_display ()

        trial (nsamples=n_trials_per_block) {
            reset_trial_vars ()

            sync = TRIAL_START

            update_trial_meta ()

            task {
                state 'Trial check' {
                    goto (
                        target = 'Block end'
                        when = card_a == -1
                    )
                    goto (
                        target = 'Trial start'
                    )
                }
                state 'Block end' {
                    yield ()
                }
                state 'Trial start' {

                    report ('***TRIAL START***')
                    sync = TRIAL_START

                    wait (iti_dur)
                    goto (
                        target = 'Flip first card'
                    )
                }
                state 'Flip first card' {
                    report ('***FLIP FIRST CARD***')
                    sync = FLIP_CARD_A
                    start_timer (
                        timer = choice_timer
                        duration = choice_dur
                    )

                    goto (
                        target = 'Flip second card'
                        when = card_selected
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (choice_timer)
                    )
                }
                state 'Flip second card' {
                    report ('***FLIP SECOND CARD***')
                    sync = FLIP_CARD_B
                    ignore = 0
                    read_card_selection ()
                    evaluate ()
                    start_timer (
                        timer = feedback_timer
                        duration = feedback_dur
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (feedback_timer)
                    )
                }
                state 'Trial end' {
                    report ('***TRIAL END***')
                    sync = TRIAL_END

                    n_success = n_success + success
                    n_failure = n_failure + failure
                    n_ignore = n_ignore + ignore
                    yield ()
                }

            }
        }
    }
}
