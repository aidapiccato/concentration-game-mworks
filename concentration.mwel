group 'Configuration variables' {
    var n_pairs = 8
    var grid_dims = [4, 4]
    var grid = [0, 0, 0, 0]
    var inv_grid = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    var flipped = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    var n_success = 0
    var n_ignore = 0
    var n_failure = 0
    var feedback = 1
    var n_trials = 0
}

var sync = 0

group 'Sync variables' {
    var TRIAL_INIT = 1
    var FLIP_CARD_A = 2
    var FLIP_CARD_B = 3
    var FEEDBACK = 4
    var TRIAL_END = 5
}

group 'Trial variables' {
    var card_a = 0
    var card_b = 0
    var success = 0
    var failure = 0
    var ignore = 0
}

%include 'concentration-io'
%include 'concentration-stim'

stimulus_display (
    background_color = br, bg, bb
    redraw_on_every_refresh = true
    announce_stimuli_on_implicit_updates = false
)

group 'Experiment variables' {
    var n_blocks = 10                // number of configurations shown in session
    var n_cycles = 10                // number of times a configuration is repeated
}

group 'Timer duration variables' {
    var choice_dur = 5s
    var feedback_dur = 2s
    var iti_dur = 2s
}

group 'Python variables' {
    var py_n_pairs = 0
    var py_grid_dims = [0, 0]
    var py_feedback = 0
    var py_grid = [0, 0, 0, 0]
    var py_inv_grid = [0, 0, 0, 0]
    var py_card_a = 0
}



%define update_config_meta ()
   run_python_string(get_config_metaparameters())
   n_pairs = py_n_pairs
   grid_dims = py_grid_dims
   grid = py_grid
   inv_grid = py_inv_grid
%end

%define reset_block_vars ()
    flipped = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    n_trials = 0
%end

%define inc_trials ()
    n_trials = n_trials + 1
%end
%define reset_trial_vars ()
    success = 0
    failure = 0
    ignore = 1
    card_b = 0
    move_mouse_cursor (device=pointer; x_position=0; y_position=0)
%end

%define update_trial_meta ()
    run_python_string(get_trial_metaparameters())
    card_a = py_card_a
%end

%define mark_as_flipped ()
    flipped[card_a] = 1
    flipped[card_b] = 1
%end

%define evaluate ()
    ignore = ignore or card_a == card_b
    if (! ignore) {
        success = grid[card_b] == grid[card_a]
        failure = !success
    }
    if (feedback and success) {
        mark_as_flipped ()
    }
%end

var selection_card_a (scope = local; default_value = 0)

protocol 'Concentration - No feedback' {
    start_io_device (pointer)
    run_python_file ('utils.py')
    feedback = 0
    block (nsamples = 3) {
        report ('***NEW BLOCK***')

        reset_block_vars ()

        update_config_meta ()
        display_images ()
        display_targets ()

        update_display ()

        list trial_list (nsamples=n_cycles; sampling_method=cycles; selection=random_with_replacement) {
            range_replicator (
                variable = selection_card_a
                from = 0
                to = n_cards_max - 1
                step = 1
            ) {
                 trial {
                        task {
                            state 'Transition' {
                                sync = 0
                                goto (
                                    target = 'Yield'
                                    when = selection_card_a >= n_pairs * 2
                                )
                                goto ( 'Intertrial interval' )
                            }
                            state 'Intertrial interval' {
                                reset_trial_vars ()
                                wait (iti_dur)
                                goto ('Trial init')
                            }
                            state 'Trial init' {
                                report ('TRIAL INIT')
                                sync = TRIAL_INIT
                                inc_trials ()
                                card_a = selection_card_a
                                goto ( 'Flip first card' )
                            }
                            state 'Flip first card' {
                                report ('FLIP FIRST CARD')
                                sync = FLIP_CARD_A
                                start_timer (
                                    timer = choice_timer
                                    duration = choice_dur
                                )
                                goto (
                                    target = 'Flip second card'
                                    when = card_selected
                                )
                                goto (
                                    target = 'Trial end'
                                    when = timer_expired (choice_timer)
                                )
                            }
                            state 'Flip second card' {
                                report ('***FLIP SECOND CARD***')
                                sync = FLIP_CARD_B
                                ignore = 0
                                read_card_selection ()
                                evaluate ()
                                goto ( 'Feedback' )
                            }
                            state 'Feedback' {
                                sync = FEEDBACK
                                start_timer (
                                    timer = feedback_timer
                                    duration = feedback_dur
                                )
                                goto (
                                    target = 'Trial end'
                                    when = timer_expired (feedback_timer)
                                )
                            }
                            state 'Trial end' {
                                report ('***TRIAL END***')
                                sync = TRIAL_END

                                n_success = n_success + success
                                n_failure = n_failure + failure
                                n_ignore = n_ignore + ignore

                                if (success) {
                                    accept_selections (trial_list)
                                }
                                if (ignore or failure) {
                                    reject_selections (trial_list)
                                }
                                yield ()
                            }
                            state 'Yield' {
                                accept_selections (trial_list)
                                yield ()
                            }
                        }
                 }
            }
        }
    }
}

protocol 'Concentration - Feedback' {
    start_io_device (pointer)
    run_python_file ('utils.py')
    feedback = 1
    block (nsamples = 3) {
        report ('***NEW BLOCK***')

        reset_block_vars ()

        update_config_meta ()
        display_images ()
        display_targets ()

        update_display ()

        list trial_list (selection = random_without_replacement) {
            range_replicator (
                variable = selection_card_a
                from = 0
                to = n_cards_max - 1
                step = 1
            ) {
                 trial {
                        task {
                            state 'Transition' {
                                sync = 0
                                goto (
                                    target = 'Yield'
                                    when = selection_card_a >= n_pairs * 2 or flipped[selection_card_a]
                                )
                                goto ( 'Intertrial interval' )
                            }
                            state 'Intertrial interval' {
                                reset_trial_vars ()
                                wait (iti_dur)
                                goto ('Trial init')
                            }
                            state 'Trial init' {
                                report ('TRIAL INIT')
                                sync = TRIAL_INIT
                                inc_trials ()
                                card_a = selection_card_a
                                goto ( 'Flip first card' )
                            }
                            state 'Flip first card' {
                                report ('FLIP FIRST CARD')
                                sync = FLIP_CARD_A
                                start_timer (
                                    timer = choice_timer
                                    duration = choice_dur
                                )

                                goto (
                                    target = 'Flip second card'
                                    when = card_selected
                                )
                                goto (
                                    target = 'Trial end'
                                    when = timer_expired (choice_timer)
                                )
                            }
                            state 'Flip second card' {
                                report ('***FLIP SECOND CARD***')
                                sync = FLIP_CARD_B
                                ignore = 0
                                read_card_selection ()
                                evaluate ()
                                goto ( 'Feedback' )
                            }
                            state 'Feedback' {
                                sync = FEEDBACK
                                start_timer (
                                    timer = feedback_timer
                                    duration = feedback_dur
                                )
                                goto (
                                    target = 'Trial end'
                                    when = timer_expired (feedback_timer)
                                )
                            }
                            state 'Trial end' {
                                report ('***TRIAL END***')
                                sync = TRIAL_END

                                n_success = n_success + success
                                n_failure = n_failure + failure
                                n_ignore = n_ignore + ignore

                                if (success) {
                                    accept_selections (trial_list)
                                }
                                if (ignore or failure) {
                                    reject_selections (trial_list)
                                }
                                yield ()
                            }
                            state 'Yield' {
                                accept_selections (trial_list)
                                yield ()
                            }
                        }
                 }
            }
        }
    }
}
