%include 'concentration-ios-io'

%define effector_x = touch_position_x
%define effector_y = touch_position_y
%define effector_down = touch_in_progress

%include 'concentration-shared'

subject_id = 10

%define update_trial_meta ()
    card_a = trials[selection_trial_index]
    trial_index = trial_index + 1
    trial_in_block_index = trial_in_block_index + 1
%end

%define update_block_meta ()
   block_index = block_index + 1
   run_python_string(get_block_metaparameters_ios())
   n_pairs = py_n_pairs
   grid = py_grid
   inv_grid = py_inv_grid
   grid_dims = py_grid_dims
   trials = py_trials
%end

%define refresh_vars_for_sync ()
    block_index = block_index
    n_pairs = n_pairs
    grid = grid
    grid_dims = grid_dims
    inv_grid = inv_grid
    trials = trials
    card_a = card_a
    card_b = card_b
    success = success
    ignore = ignore
    failure = failure
    trial_index = trial_index
    trial_in_block_index = trial_in_block_index
%end


protocol 'Concentration - iOS' {
    touch = 1
    mouse = 0
    run_python_file ('utils_ios.py')
    feedback = 0
    block (nsamples = n_blocks; sampling_method = cycles; selection = sequential_ascending) {

        update_block_meta ()

        report ('***NEW BLOCK $block_index***')

        reset_block_vars ()

        display_images ()

        display_targets ()

        update_display ()

        trial (nsamples = n_trials_max; sampling_method = samples) {
            task {
                state 'Transition' {
                    report ('Selection trial index: $selection_trial_index')
                    sync = 0
                    goto (
                        target = 'Block break'
                        when = selection_trial_index == n_trials_total and (block_index + 1) % 2 == 0
                    )
                    goto (
                        target = 'Yield'
                        when = selection_trial_index >= n_trials_total
                    )
                    goto ( 'Intertrial interval' )
                }
                state 'Block break' {
                    report('BLOCK BREAK')
                    sync = BLOCK_BREAK
                    display_message ()
                    wait (block_dur)
                    hide_message ()
                    sync = 0
                    goto ('Yield')
                }
                state 'Yield' {
                    accept_selections (selection_trial_index)
                    next_selection (selection_trial_index)
                    yield ()
                }
                state 'Intertrial interval' {
                    sync = ITI
                    reset_trial_vars ()
                    iti_dur = disc_rand(1, 3) * 500ms
                    wait (iti_dur)
                    goto ('Trial init')
                }
                state 'Trial init' {
                    report ('TRIAL INIT $selection_trial_index')
                    sync = TRIAL_INIT
                    update_trial_meta ()
                    goto ( 'Flip first card' )
                }
                state 'Flip first card' {
                    report ('FLIP FIRST CARD $card_a')
                    sync = FLIP_CARD_A
                    start_timer (
                        timer = choice_timer
                        duration = choice_dur
                    )
                    goto (
                        target = 'Flip second card'
                        when = card_selected
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (choice_timer)
                    )
                }
                state 'Flip second card' {
                    report ('FLIP SECOND CARD')
                    sync = FLIP_CARD_B
                    ignore = 0
                    read_card_selection ()
                    evaluate ()
                    goto ( 'Feedback' )
                }
                state 'Feedback' {
                    sync = FEEDBACK
                    feedback_dur = disc_rand(1, 2) * 500ms
                    start_timer (
                        timer = feedback_timer
                        duration = feedback_dur
                    )
                    goto (
                        target = 'Trial end'
                        when = timer_expired (feedback_timer)
                    )
                }
                state 'Trial end' {
                    report ('TRIAL END')


                    n_success = n_success + success
                    n_failure = n_failure + failure
                    n_ignore = n_ignore + ignore

                    refresh_vars_for_sync ()

                    accept_selections (selection_trial_index)
                    next_selection (selection_trial_index)

                    sync = TRIAL_END
                    yield ()
                }
            }
        }
    }
}
